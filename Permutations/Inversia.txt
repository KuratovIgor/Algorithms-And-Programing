#include <iostream>

using namespace std;


int factorial(int n);
void incInvers(int arr[], const int size);
void swap(int arr[], int t[], const int size);


void fillArr(int arr[], const int size)
{
	for (int i = 0; i < size; i++)
	{
		arr[i] = i + 1;
	}
}
void printArr(int arr[], const int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i];
	}
}



int main()
{
	setlocale(LC_ALL, "ru");

	int N = 0;
	cout << "Enter N: ";
	cin >> N;

	int* P = new int[N];
	int* table = new int[N];
	int fact = factorial(N);

	fillArr(P, N);
	for (int i = 0; i < N; i++)
	{
		table[i] = 0;
	}

	int k = 0;
	while (k < fact)
	{
		getchar();

		cout << k + 1 << ") ";
		printArr(table, N);
		cout << "   ";
		printArr(P, N);

		incInvers(table, N);
		swap(P, table, N);

		k++;
	}

	delete[] P;
	delete[] table;

	return 0;
}

int factorial(int n)
{
	if (n == 1)
		return 1;
	else return n * factorial(n - 1);
}

void incInvers(int arr[], const int size)
{
	for (int i = 1; i < size; i++)
	{
		if (arr[size - i - 1] == i)
		{
			arr[size - i - 1] = 0;
		}
		else
		{
			arr[size - i - 1] += 1;
			break;
		}
	}
}

void swap(int arr[], int t[], const int size)
{
	int value = 1;
	int step = 0;
	int k = 0;

	for (int i = 0; i < size; i++)
	{
		arr[i] = 0;
	}

	for (int i = 0; i < size; i++)
	{
		k = t[i];
		for (int j = 0; j < size; j++)
		{
			if (step == k && arr[j] == 0)
			{
				arr[j] = value;
				break;
			}
			else
			{
				if (arr[j] == 0) step++;
			}
		}
		value++;
		step = 0;
	}
}